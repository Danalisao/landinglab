import express from 'express';
import cors from 'cors';
import { Anthropic } from '@anthropic-ai/sdk';
import OpenAI from 'openai';
import { createApi } from 'unsplash-js';
import nodeFetch from 'node-fetch';
import dotenv from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname } from 'path';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

// V√©rifier les cl√©s API au d√©marrage
if (!process.env.ANTHROPIC_API_KEY && !process.env.OPENAI_API_KEY) {
  console.error('‚ùå Aucune cl√© API n\'est configur√©e (ANTHROPIC_API_KEY ou OPENAI_API_KEY)');
  if (process.env.NODE_ENV === 'production') {
    console.warn('‚ö†Ô∏è Running in production, continuing without API keys');
  } else {
    process.exit(1);
  }
}

if (!process.env.UNSPLASH_ACCESS_KEY) {
  console.error('‚ö†Ô∏è Unsplash API key not configured (UNSPLASH_ACCESS_KEY)');
}

let serviceStatus = {
  claude: process.env.ANTHROPIC_API_KEY ? '‚úÖ' : '‚ùå',
  openai: process.env.OPENAI_API_KEY ? '‚úÖ' : '‚ùå',
  unsplash: process.env.UNSPLASH_ACCESS_KEY ? '‚úÖ' : '‚ùå'
};

console.log('Status des services :', serviceStatus);

// Initialiser les clients
const anthropic = process.env.ANTHROPIC_API_KEY ? new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY,
}) : null;

const openai = process.env.OPENAI_API_KEY ? new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
}) : null;

const unsplash = process.env.UNSPLASH_ACCESS_KEY ? createApi({
  accessKey: process.env.UNSPLASH_ACCESS_KEY,
  fetch: nodeFetch,
}) : null;

// Structure commune pour le prompt
const getSystemPrompt = () => `Tu es un expert en marketing digital, UX/UI design et copywriting, sp√©cialis√© dans la cr√©ation de landing pages ultra-performantes et modernes.

Tu dois g√©n√©rer uniquement des r√©ponses au format JSON valide, sans texte avant ou apr√®s. Voici la structure exacte √† suivre :

{
  "hero": {
    "title": "Titre principal accrocheur (max 60 caract√®res)",
    "subtitle": "Sous-titre explicatif (max 120 caract√®res)",
    "ctaText": "Texte du CTA principal (max 25 caract√®res)",
    "ctaUrl": "URL de redirection pour le bouton CTA",
    "customImageUrl": "URL de l'image personnalis√©e (facultatif)",
    "imageQuery": "Description pr√©cise en anglais pour la recherche d'une image pertinente sur Unsplash"
  },
  "content": {
    "mainHeadline": "Titre de la proposition de valeur (max 80 caract√®res)",
    "description": "Description persuasive et claire (150-200 mots)",
    "benefits": [
      {
        "title": "Titre avantage 1",
        "description": "Description courte de l'avantage 1",
        "icon": "Nom d'ic√¥ne parmi : rocket, star, check, heart, shield, bolt, chart, users, cog, dollar, clock, trophy, target, light, smile, thumbs-up, magic, gift, crown, gem"
      },
      {
        "title": "Titre avantage 2",
        "description": "Description courte de l'avantage 2",
        "icon": "Nom d'ic√¥ne parmi : rocket, star, check, heart, shield, bolt, chart, users, cog, dollar, clock, trophy, target, light, smile, thumbs-up, magic, gift, crown, gem"
      },
      {
        "title": "Titre avantage 3",
        "description": "Description courte de l'avantage 3",
        "icon": "Nom d'ic√¥ne parmi : rocket, star, check, heart, shield, bolt, chart, users, cog, dollar, clock, trophy, target, light, smile, thumbs-up, magic, gift, crown, gem"
      }
    ],
    "features": [
      {
        "title": "Titre fonctionnalit√© 1",
        "description": "Description d√©taill√©e",
        "customImageUrl": "URL de l'image personnalis√©e (facultatif)",
        "imageQuery": "Description pr√©cise en anglais pour la recherche d'une image pertinente sur Unsplash"
      },
      {
        "title": "Titre fonctionnalit√© 2",
        "description": "Description d√©taill√©e",
        "customImageUrl": "URL de l'image personnalis√©e (facultatif)",
        "imageQuery": "Description pr√©cise en anglais pour la recherche d'une image pertinente sur Unsplash"
      },
      {
        "title": "Titre fonctionnalit√© 3",
        "description": "Description d√©taill√©e",
        "customImageUrl": "URL de l'image personnalis√©e (facultatif)",
        "imageQuery": "Description pr√©cise en anglais pour la recherche d'une image pertinente sur Unsplash"
      }
    ]
  },
  "social": {
    "testimonials": [
      {
        "quote": "Citation client 1",
        "author": "Nom et r√¥le"
      },
      {
        "quote": "Citation client 2",
        "author": "Nom et r√¥le"
      }
    ]
  },
  "closing": {
    "headline": "Titre du CTA final (max 80 caract√®res)",
    "ctaText": "Texte du bouton (max 25 caract√®res)",
    "ctaUrl": "URL de redirection pour le bouton CTA",
    "customImageUrl": "URL de l'image personnalis√©e (facultatif)",
    "imageQuery": "Description pr√©cise en anglais pour la recherche d'une image pertinente sur Unsplash"
  },
  "design": {
    "colors": {
      "primary": "Code couleur hex",
      "secondary": "Code couleur hex",
      "accent": "Code couleur hex"
    },
    "fonts": {
      "heading": "Police sugg√©r√©e pour les titres",
      "body": "Police sugg√©r√©e pour le texte"
    }
  }
}

Directives importantes :
1. G√©n√®re UNIQUEMENT du JSON valide, sans texte avant ou apr√®s
2. Respecte EXACTEMENT la structure fournie
3. Cr√©e un contenu original et cr√©atif
4. Adapte le style au secteur d'activit√©
5. Optimise pour la conversion
6. Pense mobile-first
7. Pour chaque imageQuery, fournis une description pr√©cise et pertinente EN ANGLAIS pour trouver la meilleure image possible sur Unsplash
8. Les descriptions d'images doivent √™tre sp√©cifiques et inclure des d√©tails sur le style souhait√© (ex: "modern office with natural light and plants, professional setting")`;

const getUserPrompt = (industry, targetAudience, mainGoal) => 
  `Cr√©e un contenu optimis√© pour une landing page moderne et performante avec les d√©tails suivants :

Industrie : ${industry}
Public cible : ${targetAudience}
Objectif principal : ${mainGoal}

Le contenu doit √™tre en fran√ßais, professionnel et optimis√© pour la conversion. Sois cr√©atif tout en restant pertinent pour l'industrie.`;

// Fonction pour rechercher des images sur Unsplash
async function searchUnsplashImage(query) {
  if (!unsplash) {
    console.warn('‚ö†Ô∏è Unsplash API not configured, skipping image search');
    return null;
  }

  if (!query) {
    console.warn('‚ö†Ô∏è No query provided for image search');
    return null;
  }

  console.log('üîç Searching Unsplash for:', query);

  try {
    const result = await unsplash.search.getPhotos({
      query,
      orientation: 'landscape',
      perPage: 1
    });

    console.log('üì∏ Unsplash search result:', result);

    if (result.response?.results?.length > 0) {
      const photo = result.response.results[0];
      const imageData = {
        url: photo.urls.regular,
        credit: {
          name: photo.user.name,
          link: photo.user.links.html
        }
      };
      console.log('‚úÖ Found image:', imageData);
      return imageData;
    }
    
    console.warn('‚ö†Ô∏è No images found for query:', query);
    return null;
  } catch (error) {
    console.error('‚ùå Error fetching image from Unsplash:', error);
    return null;
  }
}

// Fonction pour enrichir le contenu avec des images
async function enrichContentWithImages(content) {
  // Hero image
  if (content.hero) {
    if (content.hero.customImageUrl) {
      content.hero.imageUrl = content.hero.customImageUrl;
    } else if (content.hero.imageQuery) {
      const unsplashImage = await searchUnsplashImage(content.hero.imageQuery);
      if (unsplashImage) {
        content.hero.imageUrl = unsplashImage.url;
        content.hero.imageCredit = unsplashImage.credit;
      }
    }
  }

  // Feature images
  if (content.content?.features) {
    for (const feature of content.content.features) {
      if (feature.customImageUrl) {
        feature.imageUrl = feature.customImageUrl;
      } else if (feature.imageQuery) {
        const unsplashImage = await searchUnsplashImage(feature.imageQuery);
        if (unsplashImage) {
          feature.imageUrl = unsplashImage.url;
          feature.imageCredit = unsplashImage.credit;
        }
      }
    }
  }

  // Closing section image
  if (content.closing) {
    if (content.closing.customImageUrl) {
      content.closing.imageUrl = content.closing.customImageUrl;
    } else if (content.closing.imageQuery) {
      const unsplashImage = await searchUnsplashImage(content.closing.imageQuery);
      if (unsplashImage) {
        content.closing.imageUrl = unsplashImage.url;
        content.closing.imageCredit = unsplashImage.credit;
      }
    }
  }

  return content;
}

// Fonction pour g√©n√©rer avec Claude
async function generateWithClaude(systemPrompt, userPrompt) {
  try {
    const message = await anthropic.messages.create({
      model: "claude-3-opus-20240229",
      max_tokens: 4000,
      temperature: 0.7,
      system: systemPrompt,
      messages: [
        {
          role: "user",
          content: userPrompt
        }
      ]
    });

    const content = message.content[0].text;
    console.log('Raw Claude response:', content);
    return content;
  } catch (error) {
    console.error('Error with Claude API:', error);
    throw new Error('Failed to generate content with Claude');
  }
}

// Fonction pour g√©n√©rer avec OpenAI
async function generateWithOpenAI(systemPrompt, userPrompt) {
  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4-1106-preview",
      temperature: 0.7,
      response_format: { type: "json_object" },
      messages: [
        {
          role: "system",
          content: systemPrompt
        },
        {
          role: "user",
          content: userPrompt
        }
      ]
    });

    const content = completion.choices[0].message.content;
    console.log('Raw OpenAI response:', content);
    return content;
  } catch (error) {
    console.error('Error with OpenAI API:', error);
    throw new Error('Failed to generate content with OpenAI');
  }
}

app.post('/api/generate', async (req, res) => {
  try {
    const { industry, targetAudience, mainGoal, service = 'claude' } = req.body;
    
    console.log('üìù Received request:', { industry, targetAudience, mainGoal, service });
    
    if (!industry || !targetAudience || !mainGoal) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    const systemPrompt = getSystemPrompt();
    const userPrompt = getUserPrompt(industry, targetAudience, mainGoal);

    console.log(`ü§ñ Sending request to ${service}...`);

    let content;
    try {
      if (service === 'openai' && openai) {
        content = await generateWithOpenAI(systemPrompt, userPrompt);
      } else if (service === 'claude' && anthropic) {
        content = await generateWithClaude(systemPrompt, userPrompt);
      } else {
        throw new Error(`Service ${service} non disponible`);
      }
    } catch (error) {
      console.error('Error generating content:', error);
      return res.status(500).json({ error: `Error generating content: ${error.message}` });
    }

    console.log('üìÑ Raw response:', content);

    try {
      // Nettoyer la r√©ponse pour s'assurer qu'elle ne contient que du JSON
      const cleanedContent = content.trim().replace(/^[^{]*/, '').replace(/[^}]*$/, '');
      const parsedContent = JSON.parse(cleanedContent);
      console.log('‚úÖ Successfully parsed JSON response');
      
      // Enrichir le contenu avec des images d'Unsplash
      console.log('üñºÔ∏è Fetching images from Unsplash...');
      const enrichedContent = await enrichContentWithImages(parsedContent);
      
      res.json({ generatedContent: enrichedContent });
    } catch (parseError) {
      console.error('‚ùå JSON parse error:', parseError);
      console.error('Content that failed to parse:', content);
      return res.status(500).json({ error: 'Failed to parse AI response as JSON' });
    }
  } catch (error) {
    console.error('‚ùå Error:', error);
    res.status(500).json({ error: error.message });
  }
});

// Pour le d√©veloppement local
if (process.env.NODE_ENV !== 'production') {
  const PORT = process.env.PORT || 3000;
  app.listen(PORT, () => {
    console.log(`üöÄ Serveur d√©marr√© sur le port ${PORT}`);
  });
}

// Pour Vercel
export default app;
